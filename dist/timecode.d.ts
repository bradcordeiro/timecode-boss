export type TimecodeAttributes = {
    hours?: number;
    minutes?: number;
    seconds?: number;
    frames?: number;
    frameRate?: number;
};
export type ConvertibleToTimecode = number | string | TimecodeAttributes | Date;
export default class Timecode implements Required<TimecodeAttributes> {
    hours: number;
    minutes: number;
    seconds: number;
    frames: number;
    frameRate: number;
    constructor(timecode: ConvertibleToTimecode, frameRate?: number);
    private setFieldsFromFrameCount;
    private setFieldsFromString;
    private setFieldsFromObject;
    private setFieldsFromDate;
    private getFramesFromMilliseconds;
    private framesPerHour;
    private framesPer10Minute;
    private framesPerMinute;
    private milliseconds;
    private framesToDrop;
    private incrementIfDropFrame;
    private separator;
    private framesInHoursField;
    private framesInMinutesField;
    private framesInSecondsField;
    static isValidTimecodeString(str: string): boolean;
    static compare(a: Timecode, b: Timecode): number;
    static exactFrameRate(frameRate: number): number;
    valueOf(): number;
    toString(): string;
    toSRTString(realTime?: boolean): string;
    toObject(): Required<TimecodeAttributes>;
    setHours(hours: number): this;
    setMinutes(minutes: number): this;
    setSeconds(seconds: number): this;
    setFrames(frames: number): this;
    nominalFrameRate(): number;
    frameCount(): number;
    fractionalSeconds(): number;
    isDropFrame(): boolean;
    add(addend: ConvertibleToTimecode): Timecode;
    subtract(subtrahend: ConvertibleToTimecode): Timecode;
    pulldown(frameRate: number, start?: number): Timecode;
    pullup(frameRate: number, start?: number): Timecode;
    isBefore(timecode: Timecode): boolean;
    isSame(timecode: Timecode): boolean;
    isAfter(timecode: Timecode): boolean;
    isBetween(earlyTimecode: Timecode, laterTimecode: Timecode): boolean;
}
